{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response3, _error$response4, _error$response5;\n  console.error('API request failed:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: error.message,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n    throw new Error('Server error. Please try again later.');\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 400) {\n    var _error$response$data;\n    throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Invalid request data.');\n  } else if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 404) {\n    throw new Error('API endpoint not found.');\n  } else if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout. Please check your connection.');\n  } else {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'An unexpected error occurred.');\n  }\n});\nexport const predictPatientLoad = async request => {\n  const response = await apiClient.post('/api/predict', request);\n  return response.data;\n};\nexport const batchPredict = async requests => {\n  const response = await apiClient.post('/api/predict/batch', requests);\n  return response.data;\n};\nexport const checkHealth = async () => {\n  const response = await apiClient.get('/api/health');\n  return response.data;\n};\nexport const getCurrentAQI = async city => {\n  // Mock implementation - in production, integrate with real AQI API\n  const mockData = {\n    'Delhi': Math.floor(Math.random() * 200) + 100,\n    'Mumbai': Math.floor(Math.random() * 150) + 75,\n    'Bangalore': Math.floor(Math.random() * 100) + 50,\n    'Chennai': Math.floor(Math.random() * 120) + 60,\n    'Kolkata': Math.floor(Math.random() * 180) + 90\n  };\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockData[city] || 100);\n    }, 500);\n  });\n};\nexport const getCurrentWeather = async city => {\n  // Mock implementation - in production, integrate with weather API\n  const mockData = {\n    'Delhi': {\n      temperature: Math.floor(Math.random() * 20) + 15,\n      humidity: Math.floor(Math.random() * 40) + 40\n    },\n    'Mumbai': {\n      temperature: Math.floor(Math.random() * 15) + 20,\n      humidity: Math.floor(Math.random() * 30) + 60\n    },\n    'Bangalore': {\n      temperature: Math.floor(Math.random() * 12) + 18,\n      humidity: Math.floor(Math.random() * 25) + 45\n    },\n    'Chennai': {\n      temperature: Math.floor(Math.random() * 18) + 22,\n      humidity: Math.floor(Math.random() * 35) + 55\n    },\n    'Kolkata': {\n      temperature: Math.floor(Math.random() * 22) + 16,\n      humidity: Math.floor(Math.random() * 40) + 50\n    }\n  };\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockData[city] || {\n        temperature: 25,\n        humidity: 50\n      });\n    }, 500);\n  });\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response4","_error$response5","status","message","data","Error","_error$response$data","code","_error$response6","_error$response6$data","predictPatientLoad","post","batchPredict","requests","checkHealth","get","getCurrentAQI","city","mockData","Math","floor","random","resolve","setTimeout","getCurrentWeather","temperature","humidity"],"sources":["C:/Users/subha/OneDrive/Desktop/mumbai/Agentic Ai/MediPulse-AI/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { PredictionRequest, PredictionData } from '../types';\r\n\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? '/api' \r\n  : process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for logging\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API request failed:', {\r\n      status: error.response?.status,\r\n      message: error.message,\r\n      data: error.response?.data\r\n    });\r\n    \r\n    if (error.response?.status >= 500) {\r\n      throw new Error('Server error. Please try again later.');\r\n    } else if (error.response?.status === 400) {\r\n      throw new Error(error.response.data?.error || 'Invalid request data.');\r\n    } else if (error.response?.status === 404) {\r\n      throw new Error('API endpoint not found.');\r\n    } else if (error.code === 'ECONNABORTED') {\r\n      throw new Error('Request timeout. Please check your connection.');\r\n    } else {\r\n      throw new Error(error.response?.data?.error || 'An unexpected error occurred.');\r\n    }\r\n  }\r\n);\r\n\r\nexport const predictPatientLoad = async (request: PredictionRequest): Promise<PredictionData> => {\r\n  const response = await apiClient.post('/api/predict', request);\r\n  return response.data;\r\n};\r\n\r\nexport const batchPredict = async (requests: PredictionRequest[]): Promise<PredictionData[]> => {\r\n  const response = await apiClient.post('/api/predict/batch', requests);\r\n  return response.data;\r\n};\r\n\r\nexport const checkHealth = async (): Promise<any> => {\r\n  const response = await apiClient.get('/api/health');\r\n  return response.data;\r\n};\r\n\r\nexport const getCurrentAQI = async (city: string): Promise<number> => {\r\n  // Mock implementation - in production, integrate with real AQI API\r\n  const mockData: { [key: string]: number } = {\r\n    'Delhi': Math.floor(Math.random() * 200) + 100,\r\n    'Mumbai': Math.floor(Math.random() * 150) + 75,\r\n    'Bangalore': Math.floor(Math.random() * 100) + 50,\r\n    'Chennai': Math.floor(Math.random() * 120) + 60,\r\n    'Kolkata': Math.floor(Math.random() * 180) + 90,\r\n  };\r\n  \r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(mockData[city] || 100);\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const getCurrentWeather = async (city: string): Promise<{ temperature: number; humidity: number }> => {\r\n  // Mock implementation - in production, integrate with weather API\r\n  const mockData: { [key: string]: { temperature: number; humidity: number } } = {\r\n    'Delhi': { \r\n      temperature: Math.floor(Math.random() * 20) + 15, \r\n      humidity: Math.floor(Math.random() * 40) + 40 \r\n    },\r\n    'Mumbai': { \r\n      temperature: Math.floor(Math.random() * 15) + 20, \r\n      humidity: Math.floor(Math.random() * 30) + 60 \r\n    },\r\n    'Bangalore': { \r\n      temperature: Math.floor(Math.random() * 12) + 18, \r\n      humidity: Math.floor(Math.random() * 25) + 45 \r\n    },\r\n    'Chennai': { \r\n      temperature: Math.floor(Math.random() * 18) + 22, \r\n      humidity: Math.floor(Math.random() * 35) + 55 \r\n    },\r\n    'Kolkata': { \r\n      temperature: Math.floor(Math.random() * 22) + 16, \r\n      humidity: Math.floor(Math.random() * 40) + 50 \r\n    },\r\n  };\r\n  \r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(mockData[city] || { temperature: 25, humidity: 50 });\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}